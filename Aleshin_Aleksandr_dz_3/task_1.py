"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""


def benchmark(func):
    import time

    def wrapper(*args, **kwargs):
        start = time.time()
        return_value = func(*args, **kwargs)
        end = time.time()
        print(f'Время выполнения функции {func.__name__}: {end-start} секунд.')
        return return_value
    return wrapper


@benchmark
def ls_add(el,ls):

    for i in range(el):
        ls.append(i)  # O(1)
    return 'a) заполнение списка'

num = 1000000
ls = []
print(ls_add(num,ls))

@benchmark
def dick_add(el,dk):

    for i in range(el):
        dk[i] = i  # O(1)
    return 'a) заполнение словаря'


dk = {}
print(dick_add(num,dk))


@benchmark
def el_ls(el,num):

    return f'{el[num]}, b) получение элемента  списка'


query_num = 785435
query = ls
print(el_ls(query,query_num))

@benchmark
def el_dk(el,num):

    return f'{el[num]}, b) получение элемента словаря'  # O(1)


query2 = dk
print(el_dk(query2,query_num))


@benchmark
def del_ls(ls,el):

    return f'{ls.pop(el)} с) удаление элемента списка'  # O(n)

del_num = 595
print(del_ls(ls,del_num))


@benchmark
def del_dk(dk,el):

    return f'{dk.pop(el)} с) удаление элемента словаря'  # O(n)

print(del_dk(dk,del_num))